package arraysAndStrings;

public class LongestSubstringwitoutrepeat {

	public static void main(String[] args) {

		System.out.println(solution("02zCdYGh9Wak03g3i8Z0bh2vq7pu5xmk05vvOtoAl6Ml1gTOELTUtZZp6a9c4Y26o8c5u3bExTLtO7fXN8kyWuPR6dbKlMZLAiFbUTx1yg1v6Drc2SpTn1cS21UF2u4OToPiWSqrko1Cxkf4Nl7dXv5VOJcokb9immUyfJ3T28qH3jjAByGuz8vgj7EFwSnuODC9k6liRRyMcfKmZVhPdWpUNJp0qx38S51nLNa6GHnkTKsRgCWE0so6MRMqi8yqj106unSMQR4eRZ8Efmo8s5Gc5w7oUQyDfekTr8tI7szZFyiDJDTMQ1oh0JqS27sXRMdlcCyBgRswHQvWkGArppOGhs5e5xqrGve3xVH0LPcCBCcXSXF4qXYD4JgOPiDOoVX6IaT4NVF0gx4sUFnML5D30IxnQ3EPuf4MyyCFdLNABx7ZmIeZ9i75JOYE1ZMxD3F1dpfNAyoK6cXHeOYnJMb3v5FBrAjDrxUzzS9POwH4xjBjQieTj41YSLTCBmMrnqEazOmRD9sd0U9lQM0GYOWSZXeE5LCSbpdoiUucwfVNGH13j83K4kr1P0HheUufoN7319GiIWpCQmcPVULygmU68t64K9oSWl9WVHpOngRx2FYTqJA8tMFEyTnIrK1tOW9wvFfrYNPjumKpT7ZZsFGw1lUUsJqNPfyx4fO5hPpSMyZXEMQ7oJICPNLOW3XrfMl1yuq7BHT8ucObNRrvB7pLuEyBWTlorY8CgIR0obfFZ8eaxSyEKEB4jam7eXvh69NoALPPV53x1ZW6ag7PMlwPHMiFebwjm3Aqe4EyH7ljYccIJbkkhD8dYVG2HffLEBYDZuA8YxzLLWRlpRlcxkmFVUj3cmGLEcwmvn9Ko8JMSCk9NL4zDunyfqaFYTcfe7otIsQU062jBEOmuqCczthVJcMzFNzPkwx6vrrsUlh9OVSbCaSiztFa2j0lIjR1NJFjnGTmYod36EVq6JCYQV5McxnsHKVdd6aNokvtVaXgr4PZdTgjKemnBA28Vn0ynEBZ51kl1R3c9bqoBHgbtszzB0oHdYXMOzc9M3MIOeFSTOqoDaNy0HCH3eqKL4tC7VlO7GsQN5vVNkJ3Mjb9AOgWXaBDBjrGUHIF2CfuBjhr1ICufKCv0aKVntUR4AtY4HPCma5E8eZZ61R6EIsAeAiqiRVu8hP2NyohcLrIY4o8cI9NfTJqy5olVc9qpWO8J6wSIJvtHYDaoY6GnQSOUvKIXUyWK0Wh2MEX1E9UPamXSmI0l9VzWoycDVPJ0miHs4kAk4vl4GDJq1ImblLgkAXtNpcon598uMRIJvNQqOO1d0cNMwWkumGGyzktdLIa7xclEEda5IlijgtfyMfguqmmtDAH1M2hHIOQPzhPmeHzWzTMoBmIAJGtJeUJtSX7QEuRyIy8AwxS1Dm6HUZxJIpXzBWHs3oILGAUjlQC66GkCq8Z17DpZEFruWaj4IiiMlSBK2jdLHCCEMP1LVOHfFu6NxIPT2oeANkH8WuIFMy5Uapg8nTrInQ9DeyfFJcgytCa3fgxM1JQc3Y9MSdieFtuB7I75h4QWhRcxZIuEMjl0baojEGOZwuV1x1dsCBAfUe6Xx6Mxj7ypdxrU5hkt13swigR9ytwIodKmBQapXY3krs5D3lLfyDCEEnMqDdNJffr0078IDmpe4WizOQBehtHLug2JIKFekr3FyQBueKmxWaBpM7rpWWG8no0mwBjVfBgfA6UiEf9bDkWMRowh26kQOw9xseACSzFHa1NrmYHUCyWQFIkhXmd82817AiFNaB00mJtSHXLNMXwlu4uMyn6GJzIvcxtGqudyNQHWbDyi7vhaoeE1AhjxgHYAX2E2bKA8NIgnMClHdCxeK7jceIV3sQe8yqgA05CcWqrOFPhuWE3BDzKBFSrdD9SruFoW0EDisTwOoiiehkUgXnqY1BQCdHz7LeKJBP5f0OKvzEkGCioHgebH9facdeXQKA5BL5tIJguZAuouNONHlWZomAL3rZWLlCFyZrq0Nm2cYoxhVNxiu3eunKr7oyM4XvaXwx5vbgKAD2joVGiUxKweyPvSgH3QVI1MTPS6eZQFfZUTdKgNzpe66mWLEoq90885BAPuk3aCErMD42OQ07GxzWOA8zZGkvZl19aqggAvqiylYpy6XaVOTrMhM0Q2v4t4pthAe1zUTv4gg4F5S5LeBBp6UlvHs2PrOgfzY1kLP7hhAn7IhiOFjRdXdtbYfNjF6LbtB77NIfctIZkvqg16EWp3wLJJUnCnmop5wCM2EFYFgPXBwe7az72HTiZcUifKMCmyuIbs1aoaOFtJLyEIM6VYnfCohOYCiUSVnk183MAP5VQvsoSuLNU1fzLmFszvHdpthzZip9TPmbUxs5qMblsR7FtTRm90RZY9QVpRARnKe5CHUtaDLF7MPLGKpQNFUvqvRLV8xblTsR9zvqQ3UVyG2aH14szdm6RTv8IT6ZYMxX5h8UNEWmuZLjwqHBHRKxiMBk5zqX2xxPdbYt7lD2kQqwkqBIY69BtypXINaUck6m0GCWI3aF2MyJBfXZLKLHGCQ0uE7sWrEZa9nxWN188WDVyUuLE6yHjTb1GYlIYLb7e339cLAk7yWooENY7o0d4pn3kQuAZodx1JdPphqnA0j85UNIWdYPfoO191eUV0s4HQjyP4OxDakG7PERUdLkFpNxtUYVPtzKk8jXTnQ3Mw80hZ15RldiGEC6cGM39VwUz6bSkKTK6yAW61E9zrp9vMj7UOSfitoZK56AdJWIiKenYEsZTYBTEviBaWUGL5QuGJ9vYOrT3sIgqcbzxRvboAlfBf71MwTNF9E1bEV4Ks9R0w5E1b4YQjfELtcHNODecaaAOpjLZs1cEoBj27JaRClGPnsZGBsqCDBid3l6p6jpmlQZ7TqkGUbpCWHQNA8ykvLW0IJTtwOk4CEBDfMDV1hI9PcbJRlVDdVqUSjJI5wcwK9SFBc7jQWc99FHLZjs5KrmY4CiC2wB9tq3oFFDUAJoD9uWvfqywL7zefBYwY2Bu5cxIi0ORAkIQwdg6secUG3RMAxiSwfiEBTZ4AyXBAb1XWRwvB9Vo1PtfHaHbKApb8VcyV4ZkTfKj6Ucuj4QXKJTVL3Nc0FQO9nHBFn0IrWlma2JXftrBFibQMmCKaAtcCgvfoRgQ3yptPuaa3oq1PU0U8et6A8cK7D6WsU6UnrCLIN0r6lbVqQ3HbmxXwtTQxpLGxB2xYBYEw1pVhule4KGRAakPLSzzDqE5D3oCwW2kl1PKQyyf8qD2sD5RAIc8CNXXr4OfnFeB0YJ2KsOWI2ndRqe7rK5zER1XRfQUg4owprNW9NlFhq7IxLmdQDhLyNbc2Acl0KE5JyELO85XgBQfJLsROP9Wn228lzhpUUf1clfkiTyfr3MyiAFbgU5RGafa8hFxhlHfwDa75T2IetzspGRxmBPI2UscHbKZK9L72dsHHxNZUrGGF3U6xs8nZg6JMACnXmlBUgNFXdRcE4paNk4nU6FSS9MiBlr7S465AKWTIYBG9gYDrrxKnyFLVQmdut5DePkAZpVoZeppvJ3qw6eo59nIfwQMZE6KJ9kgnUQgY9k7KXaH8m9lGJ2beXXGVaOHBKaYVu8kShYDCrAUlbONnCbYmVwBO3njiyBy3YFB4ZIAl5XqLARRrJpJgPnTMoPZznZZPiKL1Fyf0cF9EW2eej9Fpayk65ac6u14Wd8hUB7at6Z27dE43vJ4PN3PXehsnMAOwKSBshWpACpXBFWKmMbkKjSSJbty147oFfgfmall49tq3REmn2ArVhG7xevwQf2DgEczgw4mPxfepZFLzCBkK0GyCkfPHmJVduE2SdGhNqHxO0kDHXISLagbami2PxQNY4TF31gUgFsmKVJIoT6bwjBJuQ060H9Ezft2zScmyGeslZ142y96U5bhNRMEyMtysf6g2tKptn89E2pDw9OxsG990ZYOXCPagmO0fd3xrAwf8y2shGlYgOH75Zmf0vaEAWjVgRQ0a5WHxmZLfzMMHMalee7z89KTfx1imOcsuJqa2cLrJumviNQL2UVx6iqijQPd25tddUFWUyBUTNg4T2Og1fl6DsYJOaWg0B7PqFUmJAWQoXM7gTJ5nVOzOIJlsh8rNbQ6tvMkztIcnj8v7xMFKV0eXbLbWrzIW4pXqQ2AgYkXHaOK5LmHpxxhgDOW7QyIk6l4JEavNswqaJF5pg5z7zad9cO6TDba970J0KIHTPD4swd7lmyl7iI0KPq673DUmYtRRUCDyzkXi8NHD0CIbxPaJK6G5oKee7kuSc6Hh1at8l9EmlvzTg8HsuvEOnplT0ELgAp9VLWeYiZvGsAPWSKFlJyq9jrdvy14TAY8Kq63JM7lgENwRQu0R3DIXNwO8HsJuQmDi2CQaTmu2Yo3fsw7XjQSq3aFJ2eLoHSqoO6QT7PkXSeg03FPIQlrJsvNepO1YtVUe9zMJwU4jElc89QnsiT8fvFHCmbhG2DeJKXJChnr5BGbRRBqm19LU7Mgh4QPnEpxP9Vm2tDmJFEVfkqD9iqhrECL2WTdtYdyoI6hMOAmD5gK8jVyifhR2xYm3o17U8X1kIvDbFq4y99zfnLaXQo8NHUAmooJ1Ea1wm3gfWFzsovQXGNamPxnaRnSsOfnKn0RKTOK3LLRBjBgU3msz4mavJz1z1UhdWd5Nwd2YsTo19V10nSMLygDsm2SnJW4EimNkMEmrXoInEkTUcbiASwMuqlcG9AJwwDbqziqO8kzEcLb6PgTi6gBqea990OEEeJbQh2zTFt7xPe49JpB34Pi50B5c9rOFHX1x9PXKXH3syEQcoy1iM0NgRIG5lX2V8fqXOUyiywpYMqOs7O7xIUBHvVTIrEdoI1blvgENxK9mqqfQ86mP8BGKE96IYfrArQ3PfBsPDqhqEV8UGO04uKYwUt90ur15N8MsaIYiBjKS2uXL71DPMBOoyYG2MmOhBWpMv2Z0N5vbxDv6gBk8jq7gHMhpWaFMdlmOuHxUcw4rDdO8irAqyAmdiwR0RDCU4TSQGAMQmMFpWjGtIvpiHsO2niRjDllar2KDFcwW1FR9LcJpuEaajxlDAx9YWBkAFiCJHFQpIMcnx7mVSzcep9B4wN9GDhHDSJAZajvEQoDh600hkx49XLXAClDw2pNLth1vv0IzF9kYOs5PBHMT0d4FbiFjyi0c1iMpzgiOwlJ2HUIiBwlVUuaYLMACiOKtvgiSyRlfT6uZVL2uIjvhuZZwYDfF9kVL5RAbVlfKiFVNo4fguX1cCibStv2eZEbBtvqnetHtWoEhZTpo35EPBc4IJrsQi8qq0OfS9zteWUrsbiI7mwZGTb2R7JVsQf5oPXn2B2J4eoFnW5njMISOGzzU6iaRZ7GEIl7iKQHvoJwFBra5EGpV2bP81peaqCDFrch4SNoiPzbCVVfaM43hX2uD8Z3O0nKWhMgdydqUg9RDvk5McRba3fidAkAWpBNCBg52H9COPcnWYea0SmhDuh6DYDeEot6Crq3JbscM2dvektUrm5EyZnj1LfwmniNQa16NEnHSrJIjmsVppsDXHO37wHgF1a0i7vCoE5aVaVI2AwNPLipbMWv5hN1YV4fblpeBJGICmmtL4f4vJtXDt7sivmHBMzlAy71WPc6pWFAP5rIA73C0dYcZX5o5OMiBNGoRCjqQld9zsKA6mTSpoK93HgvASV5HTc6RuEneIAdab0sbJagAothqoTtIHbmEZ3uGjNXSxK5BLwU2Gp8Wryedfz7aS63zYxTBWfRi81Iofm1ij6L1mXtrlW4JahdMInuvptiNeuLr1IzMdju2ASkukHyMwWRMPMYYrtO1vNUD76x1LpBoYwpQP8yDxsFDMDGsgCofIZ7W2tumWlrWwhTCwL2yt8SCb1Et2glLyyUzK7plu2yYCVcJqL2Hag6qTLGla0HJ7Ccmsxf6C4swpofA7DJvzVFyrrmvH5C4prTmZy7ZOUx8UH47KMPwPTu9Jh3JX3ZHlN3Ozdpvj8TP3WNBiDTkCaXKS6f2owjDQi7JwDYAj4XxDL6i4rRn8hBvzTAVLtOJCM4yOawzKvRw7P1RbxQ6U3c4pSJwtCJ8gaAQSorlx8uVcyFPtYStBzkq65Lgr4hYeDR0VkiMYE2CDaZLTUFfnZWTC9FW47Z0ru8jXS1EBQnzKlWIHz23jjuzgHhsxCiPDFXJSnNwez3YTgYGvdR4cn6ariye8MjHGJlNhMPSOfAZFEq5pwiY9LcdxV2HWiyLRYo7x82erzBBhZohHif56DTYaMMgtJISZslggNx8G3nDH6YcTDQjymARhAAL0udZVcfp7x4vfhl8LmHho5DnzCrHkHqMnqEOLDIzc8ErKUgxRysmtQxZjVPNG0xLe6ZcTVY2GznAyLsBbJBiHKrQJg7LFeSBRaxENRWt8aTiKJtHu0xJBWepm2fFe00Xtj8k1VFSoh90RUvJXBK3aqcG1sWcxGL8EC8eUx5OeQM57wiA4DUpYy1PgbBHvJcBcsT9kOts4n8h6GEHZRlWcOdiomGUmw0WpDiGRNva6cBhGnhMSO6KCFd5UODU13IioCahj4G4F12bLj9yPOo8Ud1x05jcI0AaoinxLDPqovq8g5B7epOLUi6k4o4AY5PyiYuKOBjI0T9fkddbFoKRW4B05f5iIe2fVT9w9GDzgcnCJZtj6pUCOalFgmXWJAQZUgRzUzuQVUDSFkBYjDHQ0VpsQqIIZDpeSPpKM3U9gPttVER4BZMJYQy7t8nm88WcUpcFJRMdJHbVQsJi4KZYl7jT69CelkEfS5qOjxfb1t9aZP0u6YCGvr9s7N91lMrmyqDqn7ZTU5aNcG04IYPcgIopRtQreenBHyVyVgXwp4QFHsjtQWpMbHohpFxw0uOFQBWs1yDxcAp17QIpV1bC5zSY4lAFIdwzIdjtVaYHZNT68O6xjKqcJJ0wvNU9caI2rpgzqRujYtWu2zDjnTWwugjI7quwP4lVmsDyK9sY3m8yEoF9uq7qa0jwAlyQPkDsBErl9gG7HuBSgKIIjmM9FM2I2PE9XH6YGbvnsiQ1ooVXNLe9ad6mJNNI0mhTiOM7MP1jCeUAZjeVXg1YudLaw6H9QKlVe1GKDCKrREPoL3eXIB9xGVdAvCYs58fv0ZIH0d53qWkp2MIHYmdtQc5fEch1ejILW5xWb28AVsaW10bd0tGgPEx2GIWGJTjkZt39JQ7lXr8YX16VJ89KWs4oYJemSKtuAyeBD9MpzIW5mQhZrskG6UZTDT7C0cFjbQZeTXmunNWy7boBtzLSNQkIdV0UjOATtV2kNmFFQEWd1IY0pZ8xz7NGzoNCbdxSmYEJ8a94TUM8rWdxSRYuldi6PAiDMhvMcE1gKIOmwqS1N4voavpjNWx3f0ukArgoqcvq23xEregl41MczT2cCbyh7LYqmG28XX1oUvaJ63qRncRVdeSJiDxE1sb0LXplp0q6pRwwiUwOYcOJgagMgD1MprskYCgLKODjLcCPdL0MvLDcyahN7h2vN5uc9pcrDOj05lMjTKW8KWNOT7guDOeMJPqxkhbA6QRo72OiFj0GCJ16vVKgcZ2hl1Og31NleKR3vko9zPZMmUIDzCFLeUe4cDVsrWNveIKgv0rvUjJQKVpgARsR44iZdHi2inVE7ExELYFBjmU7Uv4prJVbtXj9NfXcn2FLahEqnzDaKAIJXeDsdmtaY6m46UV87hCl5fZaKcyOD9Kifh2SVtddUDpFJPSJk5Vfy61WWQk0VDse9MBG1bX71FuJM25j4xZGnS2bAB3mtlsn2LGDAS4sW7eryDX55GiSbjP3OIT6QC0q0MkvOkuTR5MbA8Osp1LWyyNaAl0fSYfnhck2kTMTBdI1QKq7M9XcNOvNwtptGXW7RxqmXjUSE3oAMnQkV5TqEQKPRqYxx2y49ZfLDM4ScdLpRZtP2fEugfoVhMureV0u06dZpDCvhWU8pPXqsed87GrI3g9HGOEPDtf2soaJLajmrMcrImutHPQCTM7jChdz9O3iG7tY0QMfw4ZKNxC8xkpWRVsQWabwdDrDE689bxP1F8Qac1O77lXseFHTx2N9ItPMeeYcpu1jTkmaN8w43Idpao9BUZSCOWbmQoloX1DxSSDsyyh3IoXIjbyS7KseCvvsEU4N6RJ3s0O9KoJTKSPCRtgFVLRjSIME7QkWTuwjP2Ww29AXbPodkTR8S7C3I2tqDHxfd96wsW1LSmHNlhn2GYnwi56q0QyK3FDyn4edqyq6JphVRex9kBptWMnj8RvNaayqkWkqqMJlleBMMuGuAynrqUpwwp5PGxLEhliDdqOLGS376yX1xpEUkWks7mDD9iOZeiSO5zBxScHvRZVUubbAVLL19uRjn9nX8N4pFSPnqWPic6Ch4pAQcv6fxCuFqJAWwJbflKm13hcGhwhFb6WN8z4LvLFUl4T6npL7EKyjlE26YF8Wu2Ah5gSzfb0LpQtbO0R4uHA8VaF2CFQBTqWFCLN5FKcvWteaOTkBcMPrCPwm7x6stRpDMGLr8kUNynnV4Oe46Klr5IgkX4cQT6LC9oKggBhZbC75QXxJui3iSAKOEvmahhtoBCXuGZQEtlENZh13BvMFIpv7HfPppk1yMRwkdIZhXvZpYU24dLUpbIvvimfyim4pjk1KgHA3yqYogd28htYCdhHxeYZaB6O1nXVvZCkV0AWp7qhRDdbNdoe9tFQuGYjZIku2divr7UstCTJoIRg0rxZ5y6Kd9zOSwX747IDhuP4CIOfNUEHrEKNSd3RbofbEgTw8xhlIKsgzes6a1OvGySJYvn5h9cyvdnPTEgUYatDpjl4wt5p4KbCiNXjMvT6hps17GZ6fxZe4VY66iM9aFqjtoTwkvLi8LEKalCZvPu5M05WLrsdpLKr7FKawahwrFXvUWMJ3gNdoFOTywfeLmYypT5CBHtsVljlpMq3mmsQb8vryexRK9MmE6zN622uP2K1kaWWeUjz0UY3vFJwzphzSHz7T5FimyikZL93AQ8C4Xrvvq9hq01vSMeJ77Lw7IU78v0nsdogAyIDr7TSZYgzIHb9ohmY6BGMDVbutqKZ2QTw1aRbLDyjpgjRLd7KDuVjndAbPocEetDAX2oS71OsJYCoW2LO4iSw0aRlA79n7oC9iDyeVaTrGyiEbdkK2A1XGxfPvafzIPT99ifHwpiKiXnBNWDAWjwL4IcfJhMxDGAB8w26VeC4mTOW1jPTpUIiSRM94rBkv4Hyj0X09emkc5uc9usIts1CqRv2rZCwtK5N6skw5YlYclFoOFWF4SdwYQAY0jySJQx4NvDc7eMvgE1q3iuZjdG1mjfpaCoNLcbYkqcIKqVaGPs4vA9nrFgX2NcBTMfUGS4FqN6GuBXbxaR3UhnboTdkBIgP55tXcqg1zaWK0ZipidWKStVs8wnfw78NZB8tHRh9Fz8jbQhzUaM4JIv1T1hpVl1jnV9TfDK7zdaHim250H1cK8j0VXzTL7x7sSe0mQeFYZYKHpbQ6Koq3jmm11CnqhHlzQmQr8Ymfb2YestcNRwtGbHJwKTFJZoFGNiDFvoXyvoSarUYxpVlWfnZJKVWreKBF2eSIQcJL4kJBgE3t8SR9umkjNiDoT0pmP6gpxXcnyqzI5idtkT3Tzcc9Qyh2Zs5wXFuPHDvl8hwjaSkwwWTZW3ZbBzT6z4MHozWzEpSahP0N9ydB0SLA9CwcA30IyAEBXVKsPEARF12kSOrEA8JB0ItJCv1qMdHxpaGSQbqDnDPLjyVgiVwwZGaNSdbFK0Cypq609BDNzYIapJ6dNHN2edEMJZJ28ZNRBAYqsxKyclKz4dj8Xr1vNMcS0hZbyQjGrn6zvsYsA0Fx7dnZlWJdkXM9mRYyFdAnEdfScl3xAjAsmyysp42AH80ppOqu4woDCzHOJS20exFi2wj1sIXDEKvFVFb3VN8utSkgRboN1hYvfKSt8tHy6Gbgcm0zgmGXlrGqYNPz3Pbc"));

	}
	

	private static int solution(String A) {

		char[] array= A.toCharArray();
		StringBuilder sb = null;
		StringBuilder placeholder= new StringBuilder();

		boolean flag= false;

		for(int i=0; i< array.length; i++) {
			flag=true;
			sb= new StringBuilder();
			sb.append(A.charAt(i));
			for(int j=i+1; j< array.length; j++) {
				if(sb.indexOf(Character.toString(A.charAt(j))) != -1) {
					if(sb.length() > placeholder.length()) {
						placeholder=sb;
						break;
					}
					else {
						sb= new StringBuilder();
					}
				}
				else {
					sb.append(A.charAt(j));
				}
			}
			if(sb.length() > placeholder.length()) {
				placeholder=sb;
			}				
			
		}
		
		if(flag && placeholder.length() ==0) {
			placeholder=sb;
		}
		return placeholder.length();
	}

}
